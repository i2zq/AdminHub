local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 1;
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 5), "..", function(byte)
		if (Byte(byte, 2) == 81) then
			repeatNext = StrToNumber(Sub(byte, 1, 1));
			return "";
		else
			local FlatIdent_95CAC = 0;
			local a;
			while true do
				if (FlatIdent_95CAC == 0) then
					a = Char(StrToNumber(byte, 16));
					if repeatNext then
						local FlatIdent_76979 = 0;
						local b;
						while true do
							if (FlatIdent_76979 == 1) then
								return b;
							end
							if (FlatIdent_76979 == 0) then
								b = Rep(a, repeatNext);
								repeatNext = nil;
								FlatIdent_76979 = 1;
							end
						end
					else
						return a;
					end
					break;
				end
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if End then
			local Res = (Bit / (2 ^ (Start - 1))) % (2 ^ (((End - 1) - (Start - 1)) + 1));
			return Res - (Res % 1);
		else
			local Plc = 2 ^ (Start - 1);
			return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
		end
	end
	local function gBits8()
		local a = Byte(ByteString, DIP, DIP);
		DIP = DIP + 1;
		return a;
	end
	local function gBits16()
		local FlatIdent_24A02 = 0;
		local a;
		local b;
		while true do
			if (FlatIdent_24A02 == 1) then
				return (b * 256) + a;
			end
			if (FlatIdent_24A02 == 0) then
				a, b = Byte(ByteString, DIP, DIP + 2);
				DIP = DIP + 2;
				FlatIdent_24A02 = 1;
			end
		end
	end
	local function gBits32()
		local FlatIdent_89ECE = 0;
		local a;
		local b;
		local c;
		local d;
		while true do
			if (FlatIdent_89ECE == 1) then
				return (d * 16777216) + (c * 65536) + (b * 256) + a;
			end
			if (FlatIdent_89ECE == 0) then
				a, b, c, d = Byte(ByteString, DIP, DIP + 3);
				DIP = DIP + 4;
				FlatIdent_89ECE = 1;
			end
		end
	end
	local function gFloat()
		local FlatIdent_1743D = 0;
		local Left;
		local Right;
		local IsNormal;
		local Mantissa;
		local Exponent;
		local Sign;
		while true do
			if (2 == FlatIdent_1743D) then
				Exponent = gBit(Right, 21, 31);
				Sign = ((gBit(Right, 32) == 1) and -1) or 1;
				FlatIdent_1743D = 3;
			end
			if (FlatIdent_1743D == 3) then
				if (Exponent == 0) then
					if (Mantissa == 0) then
						return Sign * 0;
					else
						Exponent = 1;
						IsNormal = 0;
					end
				elseif (Exponent == 2047) then
					return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
				end
				return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
			end
			if (FlatIdent_1743D == 0) then
				Left = gBits32();
				Right = gBits32();
				FlatIdent_1743D = 1;
			end
			if (FlatIdent_1743D == 1) then
				IsNormal = 1;
				Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
				FlatIdent_1743D = 2;
			end
		end
	end
	local function gString(Len)
		local FlatIdent_5ED46 = 0;
		local Str;
		local FStr;
		while true do
			if (2 == FlatIdent_5ED46) then
				FStr = {};
				for Idx = 1, #Str do
					FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
				end
				FlatIdent_5ED46 = 3;
			end
			if (3 == FlatIdent_5ED46) then
				return Concat(FStr);
			end
			if (FlatIdent_5ED46 == 1) then
				Str = Sub(ByteString, DIP, (DIP + Len) - 1);
				DIP = DIP + Len;
				FlatIdent_5ED46 = 2;
			end
			if (FlatIdent_5ED46 == 0) then
				Str = nil;
				if not Len then
					Len = gBits32();
					if (Len == 0) then
						return "";
					end
				end
				FlatIdent_5ED46 = 1;
			end
		end
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local Instrs = {};
		local Functions = {};
		local Lines = {};
		local Chunk = {Instrs,Functions,nil,Lines};
		local ConstCount = gBits32();
		local Consts = {};
		for Idx = 1, ConstCount do
			local Type = gBits8();
			local Cons;
			if (Type == 1) then
				Cons = gBits8() ~= 0;
			elseif (Type == 2) then
				Cons = gFloat();
			elseif (Type == 3) then
				Cons = gString();
			end
			Consts[Idx] = Cons;
		end
		Chunk[3] = gBits8();
		for Idx = 1, gBits32() do
			local FlatIdent_40CF = 0;
			local Descriptor;
			while true do
				if (FlatIdent_40CF == 0) then
					Descriptor = gBits8();
					if (gBit(Descriptor, 1, 1) == 0) then
						local Type = gBit(Descriptor, 2, 3);
						local Mask = gBit(Descriptor, 4, 6);
						local Inst = {gBits16(),gBits16(),nil,nil};
						if (Type == 0) then
							Inst[3] = gBits16();
							Inst[4] = gBits16();
						elseif (Type == 1) then
							Inst[3] = gBits32();
						elseif (Type == 2) then
							Inst[3] = gBits32() - (2 ^ 16);
						elseif (Type == 3) then
							Inst[3] = gBits32() - (2 ^ 16);
							Inst[4] = gBits16();
						end
						if (gBit(Mask, 1, 1) == 1) then
							Inst[2] = Consts[Inst[2]];
						end
						if (gBit(Mask, 2, 2) == 1) then
							Inst[3] = Consts[Inst[3]];
						end
						if (gBit(Mask, 3, 3) == 1) then
							Inst[4] = Consts[Inst[4]];
						end
						Instrs[Idx] = Inst;
					end
					break;
				end
			end
		end
		for Idx = 1, gBits32() do
			Functions[Idx - 1] = Deserialize();
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[1];
		local Proto = Chunk[2];
		local Params = Chunk[3];
		return function(...)
			local Instr = Instr;
			local Proto = Proto;
			local Params = Params;
			local _R = _R;
			local VIP = 1;
			local Top = -1;
			local Vararg = {};
			local Args = {...};
			local PCount = Select("#", ...) - 1;
			local Lupvals = {};
			local Stk = {};
			for Idx = 0, PCount do
				if (Idx >= Params) then
					Vararg[Idx - Params] = Args[Idx + 1];
				else
					Stk[Idx] = Args[Idx + 1];
				end
			end
			local Varargsz = (PCount - Params) + 1;
			local Inst;
			local Enum;
			while true do
				local FlatIdent_8CEDF = 0;
				while true do
					if (FlatIdent_8CEDF == 1) then
						if (Enum <= 39) then
							if (Enum <= 19) then
								if (Enum <= 9) then
									if (Enum <= 4) then
										if (Enum <= 1) then
											if (Enum == 0) then
												Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
											else
												local A = Inst[2];
												Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
											end
										elseif (Enum <= 2) then
											Stk[Inst[2]] = {};
										elseif (Enum > 3) then
											VIP = Inst[3];
										else
											Stk[Inst[2]] = Inst[3] ~= 0;
										end
									elseif (Enum <= 6) then
										if (Enum > 5) then
											if (Stk[Inst[2]] == Stk[Inst[4]]) then
												VIP = VIP + 1;
											else
												VIP = Inst[3];
											end
										else
											local A = Inst[2];
											local C = Inst[4];
											local CB = A + 2;
											local Result = {Stk[A](Stk[A + 1], Stk[CB])};
											for Idx = 1, C do
												Stk[CB + Idx] = Result[Idx];
											end
											local R = Result[1];
											if R then
												Stk[CB] = R;
												VIP = Inst[3];
											else
												VIP = VIP + 1;
											end
										end
									elseif (Enum <= 7) then
										local FlatIdent_1B1BA = 0;
										local A;
										while true do
											if (FlatIdent_1B1BA == 0) then
												A = Inst[2];
												Stk[A](Stk[A + 1]);
												break;
											end
										end
									elseif (Enum == 8) then
										local A = Inst[2];
										Stk[A](Stk[A + 1]);
									else
										Stk[Inst[2]] = #Stk[Inst[3]];
									end
								elseif (Enum <= 14) then
									if (Enum <= 11) then
										if (Enum > 10) then
											local A = Inst[2];
											local C = Inst[4];
											local CB = A + 2;
											local Result = {Stk[A](Stk[A + 1], Stk[CB])};
											for Idx = 1, C do
												Stk[CB + Idx] = Result[Idx];
											end
											local R = Result[1];
											if R then
												Stk[CB] = R;
												VIP = Inst[3];
											else
												VIP = VIP + 1;
											end
										else
											Stk[Inst[2]] = Inst[3] ~= 0;
										end
									elseif (Enum <= 12) then
										local FlatIdent_380E8 = 0;
										local A;
										local Results;
										local Limit;
										local Edx;
										while true do
											if (FlatIdent_380E8 == 2) then
												for Idx = A, Top do
													Edx = Edx + 1;
													Stk[Idx] = Results[Edx];
												end
												break;
											end
											if (FlatIdent_380E8 == 0) then
												A = Inst[2];
												Results, Limit = _R(Stk[A](Stk[A + 1]));
												FlatIdent_380E8 = 1;
											end
											if (FlatIdent_380E8 == 1) then
												Top = (Limit + A) - 1;
												Edx = 0;
												FlatIdent_380E8 = 2;
											end
										end
									elseif (Enum > 13) then
										Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
									else
										Stk[Inst[2]][Inst[3]] = Inst[4];
									end
								elseif (Enum <= 16) then
									if (Enum == 15) then
										local A = Inst[2];
										Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
									elseif Stk[Inst[2]] then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								elseif (Enum <= 17) then
									Stk[Inst[2]]();
								elseif (Enum > 18) then
									if Stk[Inst[2]] then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									local A = Inst[2];
									Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
								end
							elseif (Enum <= 29) then
								if (Enum <= 24) then
									if (Enum <= 21) then
										if (Enum == 20) then
											Stk[Inst[2]] = Env[Inst[3]];
										else
											Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
										end
									elseif (Enum <= 22) then
										Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
									elseif (Enum == 23) then
										local A = Inst[2];
										local Results = {Stk[A](Unpack(Stk, A + 1, Top))};
										local Edx = 0;
										for Idx = A, Inst[4] do
											Edx = Edx + 1;
											Stk[Idx] = Results[Edx];
										end
									else
										local FlatIdent_39764 = 0;
										local A;
										local B;
										while true do
											if (FlatIdent_39764 == 0) then
												A = Inst[2];
												B = Stk[Inst[3]];
												FlatIdent_39764 = 1;
											end
											if (FlatIdent_39764 == 1) then
												Stk[A + 1] = B;
												Stk[A] = B[Inst[4]];
												break;
											end
										end
									end
								elseif (Enum <= 26) then
									if (Enum > 25) then
										Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
									else
										local FlatIdent_35A31 = 0;
										local A;
										while true do
											if (FlatIdent_35A31 == 0) then
												A = Inst[2];
												Stk[A] = Stk[A](Stk[A + 1]);
												break;
											end
										end
									end
								elseif (Enum <= 27) then
									Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
								elseif (Enum == 28) then
									for Idx = Inst[2], Inst[3] do
										Stk[Idx] = nil;
									end
								else
									Stk[Inst[2]] = {};
								end
							elseif (Enum <= 34) then
								if (Enum <= 31) then
									if (Enum == 30) then
										Stk[Inst[2]] = Inst[3];
									else
										Stk[Inst[2]] = Upvalues[Inst[3]];
									end
								elseif (Enum <= 32) then
									Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
								elseif (Enum == 33) then
									if (Inst[2] == Stk[Inst[4]]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									local FlatIdent_189F0 = 0;
									local B;
									local K;
									while true do
										if (FlatIdent_189F0 == 1) then
											for Idx = B + 1, Inst[4] do
												K = K .. Stk[Idx];
											end
											Stk[Inst[2]] = K;
											break;
										end
										if (FlatIdent_189F0 == 0) then
											B = Inst[3];
											K = Stk[B];
											FlatIdent_189F0 = 1;
										end
									end
								end
							elseif (Enum <= 36) then
								if (Enum > 35) then
									if (Stk[Inst[2]] == Inst[4]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									Stk[Inst[2]]();
								end
							elseif (Enum <= 37) then
								Stk[Inst[2]] = Upvalues[Inst[3]];
							elseif (Enum == 38) then
								local A = Inst[2];
								Stk[A] = Stk[A]();
							elseif (Stk[Inst[2]] ~= Stk[Inst[4]]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum <= 59) then
							if (Enum <= 49) then
								if (Enum <= 44) then
									if (Enum <= 41) then
										if (Enum == 40) then
											local A = Inst[2];
											Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
										else
											local FlatIdent_8D1A5 = 0;
											local NewProto;
											local NewUvals;
											local Indexes;
											while true do
												if (1 == FlatIdent_8D1A5) then
													Indexes = {};
													NewUvals = Setmetatable({}, {__index=function(_, Key)
														local Val = Indexes[Key];
														return Val[1][Val[2]];
													end,__newindex=function(_, Key, Value)
														local Val = Indexes[Key];
														Val[1][Val[2]] = Value;
													end});
													FlatIdent_8D1A5 = 2;
												end
												if (0 == FlatIdent_8D1A5) then
													NewProto = Proto[Inst[3]];
													NewUvals = nil;
													FlatIdent_8D1A5 = 1;
												end
												if (FlatIdent_8D1A5 == 2) then
													for Idx = 1, Inst[4] do
														local FlatIdent_AC2F = 0;
														local Mvm;
														while true do
															if (FlatIdent_AC2F == 0) then
																VIP = VIP + 1;
																Mvm = Instr[VIP];
																FlatIdent_AC2F = 1;
															end
															if (FlatIdent_AC2F == 1) then
																if (Mvm[1] == 46) then
																	Indexes[Idx - 1] = {Stk,Mvm[3]};
																else
																	Indexes[Idx - 1] = {Upvalues,Mvm[3]};
																end
																Lupvals[#Lupvals + 1] = Indexes;
																break;
															end
														end
													end
													Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
													break;
												end
											end
										end
									elseif (Enum <= 42) then
										Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
									elseif (Enum == 43) then
										Upvalues[Inst[3]] = Stk[Inst[2]];
									else
										local B = Inst[3];
										local K = Stk[B];
										for Idx = B + 1, Inst[4] do
											K = K .. Stk[Idx];
										end
										Stk[Inst[2]] = K;
									end
								elseif (Enum <= 46) then
									if (Enum > 45) then
										Stk[Inst[2]] = Stk[Inst[3]];
									else
										local A = Inst[2];
										local Cls = {};
										for Idx = 1, #Lupvals do
											local List = Lupvals[Idx];
											for Idz = 0, #List do
												local FlatIdent_28F3E = 0;
												local Upv;
												local NStk;
												local DIP;
												while true do
													if (FlatIdent_28F3E == 0) then
														Upv = List[Idz];
														NStk = Upv[1];
														FlatIdent_28F3E = 1;
													end
													if (FlatIdent_28F3E == 1) then
														DIP = Upv[2];
														if ((NStk == Stk) and (DIP >= A)) then
															local FlatIdent_98388 = 0;
															while true do
																if (FlatIdent_98388 == 0) then
																	Cls[DIP] = NStk[DIP];
																	Upv[1] = Cls;
																	break;
																end
															end
														end
														break;
													end
												end
											end
										end
									end
								elseif (Enum <= 47) then
									local A = Inst[2];
									Stk[A](Unpack(Stk, A + 1, Inst[3]));
								elseif (Enum > 48) then
									Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
								else
									local A = Inst[2];
									Stk[A](Unpack(Stk, A + 1, Inst[3]));
								end
							elseif (Enum <= 54) then
								if (Enum <= 51) then
									if (Enum > 50) then
										Stk[Inst[2]][Inst[3]] = Inst[4];
									elseif (Inst[2] == Stk[Inst[4]]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								elseif (Enum <= 52) then
									Env[Inst[3]] = Stk[Inst[2]];
								elseif (Enum == 53) then
									Stk[Inst[2]] = Stk[Inst[3]];
								else
									Env[Inst[3]] = Stk[Inst[2]];
								end
							elseif (Enum <= 56) then
								if (Enum == 55) then
									local FlatIdent_5F1CB = 0;
									local A;
									while true do
										if (FlatIdent_5F1CB == 0) then
											A = Inst[2];
											Stk[A] = Stk[A]();
											break;
										end
									end
								else
									local A = Inst[2];
									local Cls = {};
									for Idx = 1, #Lupvals do
										local List = Lupvals[Idx];
										for Idz = 0, #List do
											local Upv = List[Idz];
											local NStk = Upv[1];
											local DIP = Upv[2];
											if ((NStk == Stk) and (DIP >= A)) then
												Cls[DIP] = NStk[DIP];
												Upv[1] = Cls;
											end
										end
									end
								end
							elseif (Enum <= 57) then
								Stk[Inst[2]] = Inst[3];
							elseif (Enum > 58) then
								local FlatIdent_47ABB = 0;
								local NewProto;
								local NewUvals;
								local Indexes;
								while true do
									if (FlatIdent_47ABB == 0) then
										NewProto = Proto[Inst[3]];
										NewUvals = nil;
										FlatIdent_47ABB = 1;
									end
									if (2 == FlatIdent_47ABB) then
										for Idx = 1, Inst[4] do
											local FlatIdent_90A41 = 0;
											local Mvm;
											while true do
												if (FlatIdent_90A41 == 1) then
													if (Mvm[1] == 46) then
														Indexes[Idx - 1] = {Stk,Mvm[3]};
													else
														Indexes[Idx - 1] = {Upvalues,Mvm[3]};
													end
													Lupvals[#Lupvals + 1] = Indexes;
													break;
												end
												if (FlatIdent_90A41 == 0) then
													VIP = VIP + 1;
													Mvm = Instr[VIP];
													FlatIdent_90A41 = 1;
												end
											end
										end
										Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
										break;
									end
									if (FlatIdent_47ABB == 1) then
										Indexes = {};
										NewUvals = Setmetatable({}, {__index=function(_, Key)
											local Val = Indexes[Key];
											return Val[1][Val[2]];
										end,__newindex=function(_, Key, Value)
											local FlatIdent_61800 = 0;
											local Val;
											while true do
												if (FlatIdent_61800 == 0) then
													Val = Indexes[Key];
													Val[1][Val[2]] = Value;
													break;
												end
											end
										end});
										FlatIdent_47ABB = 2;
									end
								end
							else
								Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
							end
						elseif (Enum <= 69) then
							if (Enum <= 64) then
								if (Enum <= 61) then
									if (Enum == 60) then
										local A = Inst[2];
										Stk[A] = Stk[A](Stk[A + 1]);
									else
										local A = Inst[2];
										local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
										Top = (Limit + A) - 1;
										local Edx = 0;
										for Idx = A, Top do
											local FlatIdent_7DFA5 = 0;
											while true do
												if (FlatIdent_7DFA5 == 0) then
													Edx = Edx + 1;
													Stk[Idx] = Results[Edx];
													break;
												end
											end
										end
									end
								elseif (Enum <= 62) then
									if (Stk[Inst[2]] ~= Stk[Inst[4]]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								elseif (Enum > 63) then
									Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
								else
									local A = Inst[2];
									local B = Stk[Inst[3]];
									Stk[A + 1] = B;
									Stk[A] = B[Inst[4]];
								end
							elseif (Enum <= 66) then
								if (Enum > 65) then
									do
										return;
									end
								else
									do
										return;
									end
								end
							elseif (Enum <= 67) then
								if (Stk[Inst[2]] == Inst[4]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif (Enum > 68) then
								Stk[Inst[2]] = Env[Inst[3]];
							else
								local FlatIdent_28014 = 0;
								local A;
								local Results;
								local Limit;
								local Edx;
								while true do
									if (FlatIdent_28014 == 0) then
										A = Inst[2];
										Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
										FlatIdent_28014 = 1;
									end
									if (FlatIdent_28014 == 1) then
										Top = (Limit + A) - 1;
										Edx = 0;
										FlatIdent_28014 = 2;
									end
									if (FlatIdent_28014 == 2) then
										for Idx = A, Top do
											Edx = Edx + 1;
											Stk[Idx] = Results[Edx];
										end
										break;
									end
								end
							end
						elseif (Enum <= 74) then
							if (Enum <= 71) then
								if (Enum > 70) then
									local A = Inst[2];
									local Results = {Stk[A](Unpack(Stk, A + 1, Top))};
									local Edx = 0;
									for Idx = A, Inst[4] do
										local FlatIdent_691EB = 0;
										while true do
											if (FlatIdent_691EB == 0) then
												Edx = Edx + 1;
												Stk[Idx] = Results[Edx];
												break;
											end
										end
									end
								elseif not Stk[Inst[2]] then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif (Enum <= 72) then
								if not Stk[Inst[2]] then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif (Enum == 73) then
								Stk[Inst[2]] = #Stk[Inst[3]];
							else
								local A = Inst[2];
								local Results, Limit = _R(Stk[A](Stk[A + 1]));
								Top = (Limit + A) - 1;
								local Edx = 0;
								for Idx = A, Top do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							end
						elseif (Enum <= 76) then
							if (Enum > 75) then
								Upvalues[Inst[3]] = Stk[Inst[2]];
							else
								for Idx = Inst[2], Inst[3] do
									Stk[Idx] = nil;
								end
							end
						elseif (Enum <= 77) then
							if (Stk[Inst[2]] == Stk[Inst[4]]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum == 78) then
							VIP = Inst[3];
						else
							Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
						end
						VIP = VIP + 1;
						break;
					end
					if (FlatIdent_8CEDF == 0) then
						Inst = Instr[VIP];
						Enum = Inst[1];
						FlatIdent_8CEDF = 1;
					end
				end
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
return VMCalletFEnv(), ...);
